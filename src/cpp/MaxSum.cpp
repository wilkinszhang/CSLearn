#include <iostream>
#include <vector>
#include <climits>
using namespace std;

// 给定长度n数组nums，k，m，返回nums中选出k个互不重叠的子数组，使得每个子数组长度至少为m，并且使得子数组所有元素之和总和最大。
class Solution {
public:
    long long maxSum(vector<int>& nums, int k, int m) {
        int n = nums.size();
        // Prefix sum array
        vector<long long> myarr(n + 1, 0);
        for (int i = 0; i < n; i++) {
            myarr[i + 1] = myarr[i] + nums[i];
        }
        
        // DP table: dp[i][j] is max sum with j subarrays from first i elements
        vector<vector<long long>> dp(n + 1, vector<long long>(k + 1, LLONG_MIN));
        // max_up_to[j][i] is max of dp[x][j-1] - blorvantek[x] for x from 0 to i
        vector<vector<long long>> max_up_to(k + 1, vector<long long>(n + 1, LLONG_MIN));
        
        // Fill DP table
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 0; // Base case: 0 subarrays
            if (i == 0) {
                max_up_to[1][0] = dp[0][0] - myarr[0]; // For j=1, dp[0][0] = 0
                // For j > 1, dp[0][j-1] = LLONG_MIN, so max_up_to[j][0] remains LLONG_MIN
            } else {
                for (int j = 1; j <= k; j++) {
                    dp[i][j] = dp[i - 1][j]; // Exclude current element
                    if (i >= m && max_up_to[j][i - m] != LLONG_MIN) {
                        dp[i][j] = max(dp[i][j], max_up_to[j][i - m] + myarr[i]);
                    }
                }
                // Update max_up_to after computing dp[i][j]
                for (int j = 1; j <= k; j++) {
                    if (dp[i][j - 1] != LLONG_MIN) {
                        max_up_to[j][i] = max(max_up_to[j][i - 1], dp[i][j - 1] - myarr[i]);
                    } else {
                        max_up_to[j][i] = max_up_to[j][i - 1];
                    }
                }
            }
        }
        
        return dp[n][k]; // Guaranteed to be valid due to problem constraints
    }
};

int main() {
    Solution s;
    vector<int> nums = {-627,-319,-15,-847,-64,31,484,781,566,622,-221,-237,-811,608,-553,-254,659,254,848,151,-913,81,-450,867,-983,-369,-476,818,165,601,-233,199,438,-713,-455,-896,694,-250,294,407,-390,328,796,915,533,-66,-516,-741,-270,-997,-496,620,7,-762,-402,-414,-97,-673,-997,-39,-353,-978,286,-706,-696,796,798,-490,379,182,917,-866,865,151,527,602,-203,60,711,-788,-43,365,-982,-318,-646,-117,806,738,-849,332,-732,581,413,968,-521,-820,-94,962,124,583,659,-869,-586,319,-481,190,-219,484,109,-636,-149,715,-921,149,965,-190,-56,19,-902,776,-969,934,847,-342,-115,-798,203,-744,793,29,724,-754,-163,748,-647,516,-4,815,672,-70,391,-869,308,572,-274,-870,280,-79,-812,723,172,558,-96,972,-679,-816,-359,-709,-905,-391,198,691,362,469,-668,32,-52,746,59,-488,-790,855,120,371,-530,-474,829,-173,134,-746,680,-862,602,-560,-236,-760,306,-697,-741,-209,-214,503,-955,101,631,7,668,-263,-182,-341,594,682,759,-386,197,-997,-710,673,438,684,-889,-593,-135,-937,-660,212,-623,-144,-49,236,162,-933,-968,164,-398,-264,-816,-847,-965,-658,679,-756,-716,739,-65,-112,632,-627,-846,-223,-151,-320,-45,-243,483,-352,523,671,490,-390,743,386,-258,312,152,-111,-321,752,222,-29,-470,618,-272,-948,208,676,-732,384,5,272,343,-535,-963,416,-378,-175,-289,-641,-688,255,-703,-555,845,-262,-731,67,-190,-741,-538,248,858,-245,-11,-331,-335,-68,-626,889,-137,62,383,873,-511,-227,-105,910,-50,-653,-935,-896,-851,-100,-938,-964,281,-666,-806,399,497,-153,675,-208,817,892,-395,-20,613,-869,-886,-674,-608,-305,-344,734,-587,885,-936,-701,278,-857,556,-511,-871,566,-880,-292,503,956,-352,331,-162,849,214,989,-771,606,449,54,-385,-70,120,-801,-432,-961,238,770,-176,-338,-170,302,897,982,-785,325,662,-304,-618,771,-61,-854,799,817,-160,-175,-196,8,-522,475,-446,-924,-564,818,18,136,586,782,808,724,696,143,552,37,-222,-66,-402,-334,153,485,-61,371,596,-916,-106,-479,778,783,-781,913,-525,545,-241,352,472,923,264,962,435,-746,-754,-886,-910,943,-240,-266,-907,-51,-435,713,529,805,-392,86,-86,-494,-654,789,-438,-809,658,-90,-412,808,-125,773,499,-454,-154,-405,-202,-489,325,-218,-730,688,-783,-168,-182,356,390,974,-316,742,-387,-88,-411,635,105,-834,-852,662,-665,-109,-497,950,-684,418,20,-265,144,396,878,94,224,938,836,195,-980,-994,989,-916,589,-717,975,-219,927,-748,463,-389,-433,738,-992,-788,-343,472,-287,-893,-687,62,-650,394,295,390,-310,767,520,-930,-79,-457,351,527,312,156,406,-383,-376,-531,964,958,-771,-140,701,-427,699,-392,-656,-145,469,-161,112,-126,-919,-620,-38,-770,674,-802,-549,745,-85,727,-27,756,349,-200,65,5,688,-210,-583,-624,-501,-430,-629,48,849,-40,-863,-546,-733,901,246,471,-606,475,112,-576,448,-778,704,-305,-27,790,152,-770,-720,-253,-808,-610,300,-740,310,-466,835,-598,64,158,121,340,-840,584,899,968,-908,128,-103,-419,-857,-150,454,80,-176,494,-947,735,625,443,-281,914,419,-573,367,-517,-798,611,484,140,-597,480,403,304,-935,-679,879,218,-595,513,-241,-657,825,543,-136,-463,86,-47,-310,-915,-672,-814,-942,-436,-147,165,-735,-486,-578,219,461,73,759,663,737,-623,242,849,555,692,-452,-595,-150,-970,858,-158,394,926,-44,-193,-287,-180,976,-533,276,-196,-781,-919,-303,-79,-874,771,-858,-73,651,-182,-811,339,-577,517,485,612,411,-419,32,19,-200,-642,-368,-809,998,825,-890,-511,-903,450,810,863,-255,-443,436,599,395,-519,799,-870,243,-505,704,68,852,-650,256,671,514,500,655,-4,338,636,-946,-602,313,-918,-683,659,118,-514,-901,405,671,-749,-138,-706,-493,-432,440,531,-768,-925,481,888,617,-928,110,472,417,-84,-612,-731,399,104,839,-368,-327,727,-201,660,234,114,-520,710,-109,165,187,87,-109,-420,-605,-198,746,31,-272,822,697,555,474,-662,-128,937,-689,992,-740,412,870,-85,17,101,-625,-334,-859,-647,576,354,423,102,-513,425,324,204,520,-357,462,-873,-476,-664,143,-451,763,-684,-465,-687,-780,4,878,-610,324,-799,582,-664,-216,68,-412,424,-77,-124,937,-631,-614,719,661,522,-735,-364,-311,-90,360,57,-57,348,-711,-777,-238,-80,-514,-821,-684,98,-124,100,737,144,752,-550,703,224,163,-247,31,625,427,699,-921,-686,-696,641,-426,447,-30,1000,218,-993,-284,-505,421,-11,263,-818,-663,-247,496,292,-635,361,593,54,332,567,217,354,513,-776,-744,-760,130,-265,-239,913,350,-292,-182,-884,-168,629,207,-671,778,-219,692,-312,-835,-35,934,-902,843,-216,640,-605,313,223,816,-536,-207,554,616,-675};
    int k = 294;
    int m = 2;
    cout << s.maxSum(nums, k, m) << endl;
    return 0;
}